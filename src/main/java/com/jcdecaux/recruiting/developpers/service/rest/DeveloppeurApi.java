/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.jcdecaux.recruiting.developpers.service.rest;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.jcdecaux.recruiting.developpers.domain.model.Developpeur;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-11-27T21:07:20.470+01:00")

@Api(value = "developpeur", description = "the developpeur API")
public interface DeveloppeurApi {

    @ApiOperation(value = "Creates list of developpeurs with given input array", notes = "", response = Void.class, tags={ "developpeur", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Void.class) })
    
    @RequestMapping(value = "/developpeur/createWithArray",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<Void> createUsersWithArrayInput(@ApiParam(value = "List of developpeur object" ,required=true )  @Valid @RequestBody List<Developpeur> body) {
        // do some magic!
        return new ResponseEntity<Void>(HttpStatus.OK);
    }


    @ApiOperation(value = "Creates list of developpeur with given input array", notes = "", response = Void.class, tags={ "developpeur", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Void.class) })
    
    @RequestMapping(value = "/developpeur/create",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<Void> createUsersWithInput(@ApiParam(value = " user object" ,required=true )  @Valid @RequestBody Developpeur body) {
        // do some magic!
        return new ResponseEntity<Void>(HttpStatus.OK);
    }


    @ApiOperation(value = "Delete developpeur", notes = "This can only be done by the logged in developpeur.", response = Void.class, tags={ "developpeur", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid username supplied", response = Void.class),
        @ApiResponse(code = 404, message = "User not found", response = Void.class) })
    
    @RequestMapping(value = "/developpeur/{username}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteDeveloppeur(@ApiParam(value = "The name that needs to be deleted",required=true ) @PathVariable("username") String username) {
        // do some magic!
        return new ResponseEntity<Void>(HttpStatus.OK);
    }


    @ApiOperation(value = "Get user by user name", notes = "", response = Developpeur.class, tags={ "developpeur", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Developpeur.class),
        @ApiResponse(code = 400, message = "Invalid username supplied", response = Void.class),
        @ApiResponse(code = 404, message = "User not found", response = Void.class) })
    
    @RequestMapping(value = "/developpeur/listByLangage/{name}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Developpeur> getUserByLangageName(@ApiParam(value = "lister les développeurs ayant comme compétence un langage de programmation en particulier. ",required=true ) @PathVariable("name") String name) {
        // do some magic!
        return new ResponseEntity<Developpeur>(HttpStatus.OK);
    }


    @ApiOperation(value = "Get user by user name", notes = "", response = Developpeur.class, tags={ "developpeur", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Developpeur.class),
        @ApiResponse(code = 400, message = "Invalid username supplied", response = Void.class),
        @ApiResponse(code = 404, message = "User not found", response = Void.class) })
    
    @RequestMapping(value = "/developpeur/{username}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Developpeur> getUserByName(@ApiParam(value = "The name that needs to be fetched. Use user1 for testing. ",required=true ) @PathVariable("username") String username) {
        // do some magic!
    	Developpeur developpeur = new Developpeur();
    	developpeur.setId(2L);
        return new ResponseEntity<Developpeur>(developpeur, HttpStatus.OK);
    }


    @ApiOperation(value = "Updated user", notes = "This can only be done by the logged in user.", response = Void.class, tags={ "developpeur", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid user supplied", response = Void.class),
        @ApiResponse(code = 404, message = "Developpeur not found", response = Void.class) })
    
    @RequestMapping(value = "/developpeur/{username}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<Void> updateUser(@ApiParam(value = "name that need to be updated",required=true ) @PathVariable("username") String username,@ApiParam(value = "Updated user object" ,required=true )  @Valid @RequestBody Developpeur body) {
        // do some magic!
        return new ResponseEntity<Void>(HttpStatus.OK);
    }

}
