/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.jcdecaux.recruiting.developpers.service.rest;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.jcdecaux.recruiting.developpers.domain.model.Langage;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-11-27T21:07:20.470+01:00")

@Api(value = "langage", description = "the langage API")
public interface LangageApi {

    @ApiOperation(value = "Create Langage", notes = "This can only be done by the logged in Langage.", response = Void.class, tags={ "langage", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Void.class) })
    
    @RequestMapping(value = "/langage",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<Void> createLangage(@ApiParam(value = "Created langage object" ,required=true )  @Valid @RequestBody Langage body) {
        // do some magic!
        return new ResponseEntity<Void>(HttpStatus.OK);
    }


    @ApiOperation(value = "Creates list of Langages with given input array", notes = "", response = Void.class, tags={ "langage", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Void.class) })
    
    @RequestMapping(value = "/langage/createWithArray",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<Void> createLangagesWithArrayInput(@ApiParam(value = "List of Langage object" ,required=true )  @Valid @RequestBody List<Langage> body) {
        // do some magic!
        return new ResponseEntity<Void>(HttpStatus.OK);
    }


    @ApiOperation(value = "Creates list of Langage with given input array", notes = "", response = Void.class, tags={ "langage", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Void.class) })
    
    @RequestMapping(value = "/langage/createWithList",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<Void> createLangagesWithListInput(@ApiParam(value = "List of Langage object" ,required=true )  @Valid @RequestBody List<Langage> body) {
        // do some magic!
        return new ResponseEntity<Void>(HttpStatus.OK);
    }


    @ApiOperation(value = "Delete Langage", notes = "This can only be done by the logged in Langage.", response = Void.class, tags={ "langage", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid name supplied", response = Void.class),
        @ApiResponse(code = 404, message = "User not found", response = Void.class) })
    
    @RequestMapping(value = "/langage/{name}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteLangage(@ApiParam(value = "The name that needs to be deleted",required=true ) @PathVariable("name") String name) {
        // do some magic!
        return new ResponseEntity<Void>(HttpStatus.OK);
    }


    @ApiOperation(value = "Get Langage by Langage name", notes = "", response = Langage.class, tags={ "langage", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Langage.class),
        @ApiResponse(code = 400, message = "Invalid Langage name supplied", response = Void.class),
        @ApiResponse(code = 404, message = "Langage not found", response = Void.class) })
    
    @RequestMapping(value = "/langage/{name}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Langage> getLangageByName(@ApiParam(value = "The name that needs to be fetched. Use Langage for testing. ",required=true ) @PathVariable("name") String name) {
        // do some magic!
        return new ResponseEntity<Langage>(HttpStatus.OK);
    }


    @ApiOperation(value = "Updated Langage", notes = "This can only be done by the logged in Langage.", response = Void.class, tags={ "langage", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid user supplied", response = Void.class),
        @ApiResponse(code = 404, message = "Developpeur not found", response = Void.class) })
    
    @RequestMapping(value = "/langage/{name}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<Void> updateLangage(@ApiParam(value = "name that need to be updated",required=true ) @PathVariable("name") String name,@ApiParam(value = "Updated Langage object" ,required=true )  @Valid @RequestBody Langage body) {
        // do some magic!
        return new ResponseEntity<Void>(HttpStatus.OK);
    }

}
