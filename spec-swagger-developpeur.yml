swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Developpeur"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "marcchine@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
basePath: ""
tags:
- name: "langage"
  description: "Everything about your Langage"
  externalDocs:
    description: "Find out more"
    url: "http://localhost:8080"
- name: "developpeur"
  description: "Operations about developpeur"
  externalDocs:
    description: "Find out more about our developpeur"
    url: "http://localhost:8080"
schemes:
- "http"
paths:
  /langage:
    post:
      tags:
      - "langage"
      summary: "Create Langage"
      description: "This can only be done by the logged in Langage."
      operationId: "createLangage"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created langage object"
        required: true
        schema:
          $ref: "#/definitions/Langage"
      responses:
        default:
          description: "successful operation"
  /langage/createWithArray:
    post:
      tags:
      - "langage"
      summary: "Creates list of Langages with given input array"
      description: ""
      operationId: "createLangagesWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of Langage object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Langage"
      responses:
        default:
          description: "successful operation"
  /langage/createWithList:
    post:
      tags:
      - "langage"
      summary: "Creates list of Langage with given input array"
      description: ""
      operationId: "createLangagesWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of Langage object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Langage"
      responses:
        default:
          description: "successful operation"
  /attributelangage2developpeur/{langageName}/{userName}:
    post:
      tags:
      - "langage"
      summary: "associer un langage de programmation à un développeur,"
      description: ""
      operationId: "putLangageToDeveloppeur"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "langageName"
        in: "path"
        description: "The name that needs to be fetched. Use Langage for testing. "
        required: true
        type: "string"
      - name: "userName"
        in: "path"
        description: "The name that needs to be fetched. Use Developpeur for testing. "
        required: true
        type: "string"  
      responses:
        default:
          description: "successful operation"       
  /langage/{name}:
    get:
      tags:
      - "langage"
      summary: "Get Langage by Langage name"
      description: ""
      operationId: "getLangageByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "The name that needs to be fetched. Use Langage for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Langage"
        400:
          description: "Invalid Langage name supplied"
        404:
          description: "Langage not found"
    put:
      tags:
      - "langage"
      summary: "Updated Langage"
      description: "This can only be done by the logged in Langage."
      operationId: "updateLangage"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated Langage object"
        required: true
        schema:
          $ref: "#/definitions/Langage"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "Developpeur not found"
    delete:
      tags:
      - "langage"
      summary: "Delete Langage"
      description: "This can only be done by the logged in Langage."
      operationId: "deleteLangage"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid name supplied"
        404:
          description: "User not found"
  /developpeur/createWithArray:
    post:
      tags:
      - "developpeur"
      summary: "Creates list of developpeurs with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of developpeur object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Developpeur"
      responses:
        default:
          description: "successful operation"
  /developpeur/createWithList:
    post:
      tags:
      - "developpeur"
      summary: "Creates list of developpeur with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Developpeur"
      responses:
        default:
          description: "successful operation"
  /developpeur/listByLangage/{name}:
    get:
      tags:
      - "developpeur"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByLangageName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "lister les développeurs ayant comme compétence un langage de programmation en particulier. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Developpeur"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"         
  /developpeur/{username}:
    get:
      tags:
      - "developpeur"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Developpeur"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "developpeur"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/Developpeur"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "Developpeur not found"
    delete:
      tags:
      - "developpeur"
      summary: "Delete developpeur"
      description: "This can only be done by the logged in developpeur."
      operationId: "deleteDeveloppeur"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Langage:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      status:
        type: "string"
        description: "Langage Status"
        enum:
        - "active"
        - "inactive"
        - "approve"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Langage"
  
  Developpeur:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      langages:
        type: "array"
        items:
          $ref: '#/definitions/Langage'
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "Developpeur"
 
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"